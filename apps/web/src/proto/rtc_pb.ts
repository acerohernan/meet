// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file rtc.proto (package core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Participant, ParticipantPermissions, Room } from "./room_pb.js";

/**
 * @generated from message core.SignalRequest
 */
export class SignalRequest extends Message<SignalRequest> {
  /**
   * @generated from field: string participant_id = 1;
   */
  participantId = "";

  /**
   * @generated from field: string room_id = 4;
   */
  roomId = "";

  /**
   * @generated from oneof core.SignalRequest.request
   */
  request: {
    /**
     * @generated from field: core.StartSession start_session = 2;
     */
    value: StartSession;
    case: "startSession";
  } | {
    /**
     * @generated from field: core.CloseSession close_session = 3;
     */
    value: CloseSession;
    case: "closeSession";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SignalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.SignalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_session", kind: "message", T: StartSession, oneof: "request" },
    { no: 3, name: "close_session", kind: "message", T: CloseSession, oneof: "request" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalRequest {
    return new SignalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalRequest {
    return new SignalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalRequest {
    return new SignalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignalRequest | PlainMessage<SignalRequest> | undefined, b: SignalRequest | PlainMessage<SignalRequest> | undefined): boolean {
    return proto3.util.equals(SignalRequest, a, b);
  }
}

/**
 * @generated from message core.SignalResponse
 */
export class SignalResponse extends Message<SignalResponse> {
  /**
   * @generated from field: string participant_id = 1;
   */
  participantId = "";

  /**
   * @generated from field: string room_id = 4;
   */
  roomId = "";

  /**
   * @generated from oneof core.SignalResponse.response
   */
  response: {
    /**
     * @generated from field: core.JoinResponse join_response = 2;
     */
    value: JoinResponse;
    case: "joinResponse";
  } | {
    /**
     * @generated from field: core.RefreshToken refresh_token = 3;
     */
    value: RefreshToken;
    case: "refreshToken";
  } | {
    /**
     * @generated from field: core.RoomUpdated room_updated = 5;
     */
    value: RoomUpdated;
    case: "roomUpdated";
  } | {
    /**
     * @generated from field: core.ParticipantConnected participant_connected = 6;
     */
    value: ParticipantConnected;
    case: "participantConnected";
  } | {
    /**
     * @generated from field: core.ParticipantUpdated participant_updated = 7;
     */
    value: ParticipantUpdated;
    case: "participantUpdated";
  } | {
    /**
     * @generated from field: core.ParticipantDisconnected participant_disconnected = 8;
     */
    value: ParticipantDisconnected;
    case: "participantDisconnected";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SignalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.SignalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "join_response", kind: "message", T: JoinResponse, oneof: "response" },
    { no: 3, name: "refresh_token", kind: "message", T: RefreshToken, oneof: "response" },
    { no: 5, name: "room_updated", kind: "message", T: RoomUpdated, oneof: "response" },
    { no: 6, name: "participant_connected", kind: "message", T: ParticipantConnected, oneof: "response" },
    { no: 7, name: "participant_updated", kind: "message", T: ParticipantUpdated, oneof: "response" },
    { no: 8, name: "participant_disconnected", kind: "message", T: ParticipantDisconnected, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalResponse {
    return new SignalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalResponse {
    return new SignalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalResponse {
    return new SignalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SignalResponse | PlainMessage<SignalResponse> | undefined, b: SignalResponse | PlainMessage<SignalResponse> | undefined): boolean {
    return proto3.util.equals(SignalResponse, a, b);
  }
}

/**
 * @generated from message core.StartSession
 */
export class StartSession extends Message<StartSession> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: core.ParticipantPermissions permissions = 3;
   */
  permissions?: ParticipantPermissions;

  /**
   * @generated from field: string node_id = 4;
   */
  nodeId = "";

  constructor(data?: PartialMessage<StartSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.StartSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "message", T: ParticipantPermissions },
    { no: 4, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSession {
    return new StartSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSession {
    return new StartSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartSession {
    return new StartSession().fromJsonString(jsonString, options);
  }

  static equals(a: StartSession | PlainMessage<StartSession> | undefined, b: StartSession | PlainMessage<StartSession> | undefined): boolean {
    return proto3.util.equals(StartSession, a, b);
  }
}

/**
 * @generated from message core.JoinResponse
 */
export class JoinResponse extends Message<JoinResponse> {
  /**
   * @generated from field: core.Room room = 1;
   */
  room?: Room;

  /**
   * @generated from field: repeated core.Participant participants = 2;
   */
  participants: Participant[] = [];

  constructor(data?: PartialMessage<JoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.JoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "message", T: Room },
    { no: 2, name: "participants", kind: "message", T: Participant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JoinResponse {
    return new JoinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JoinResponse {
    return new JoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JoinResponse {
    return new JoinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JoinResponse | PlainMessage<JoinResponse> | undefined, b: JoinResponse | PlainMessage<JoinResponse> | undefined): boolean {
    return proto3.util.equals(JoinResponse, a, b);
  }
}

/**
 * @generated from message core.CloseSession
 */
export class CloseSession extends Message<CloseSession> {
  constructor(data?: PartialMessage<CloseSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.CloseSession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseSession {
    return new CloseSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseSession {
    return new CloseSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseSession {
    return new CloseSession().fromJsonString(jsonString, options);
  }

  static equals(a: CloseSession | PlainMessage<CloseSession> | undefined, b: CloseSession | PlainMessage<CloseSession> | undefined): boolean {
    return proto3.util.equals(CloseSession, a, b);
  }
}

/**
 * @generated from message core.RefreshToken
 */
export class RefreshToken extends Message<RefreshToken> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<RefreshToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.RefreshToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshToken {
    return new RefreshToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshToken {
    return new RefreshToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshToken {
    return new RefreshToken().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshToken | PlainMessage<RefreshToken> | undefined, b: RefreshToken | PlainMessage<RefreshToken> | undefined): boolean {
    return proto3.util.equals(RefreshToken, a, b);
  }
}

/**
 * @generated from message core.RoomUpdated
 */
export class RoomUpdated extends Message<RoomUpdated> {
  /**
   * @generated from field: core.Room room = 1;
   */
  room?: Room;

  constructor(data?: PartialMessage<RoomUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.RoomUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room", kind: "message", T: Room },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoomUpdated {
    return new RoomUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoomUpdated {
    return new RoomUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoomUpdated {
    return new RoomUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: RoomUpdated | PlainMessage<RoomUpdated> | undefined, b: RoomUpdated | PlainMessage<RoomUpdated> | undefined): boolean {
    return proto3.util.equals(RoomUpdated, a, b);
  }
}

/**
 * @generated from message core.ParticipantConnected
 */
export class ParticipantConnected extends Message<ParticipantConnected> {
  /**
   * @generated from field: core.Participant participant = 1;
   */
  participant?: Participant;

  constructor(data?: PartialMessage<ParticipantConnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.ParticipantConnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: Participant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantConnected {
    return new ParticipantConnected().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantConnected | PlainMessage<ParticipantConnected> | undefined, b: ParticipantConnected | PlainMessage<ParticipantConnected> | undefined): boolean {
    return proto3.util.equals(ParticipantConnected, a, b);
  }
}

/**
 * @generated from message core.ParticipantUpdated
 */
export class ParticipantUpdated extends Message<ParticipantUpdated> {
  /**
   * @generated from field: core.Participant participant = 1;
   */
  participant?: Participant;

  constructor(data?: PartialMessage<ParticipantUpdated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.ParticipantUpdated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant", kind: "message", T: Participant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantUpdated {
    return new ParticipantUpdated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantUpdated {
    return new ParticipantUpdated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantUpdated {
    return new ParticipantUpdated().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantUpdated | PlainMessage<ParticipantUpdated> | undefined, b: ParticipantUpdated | PlainMessage<ParticipantUpdated> | undefined): boolean {
    return proto3.util.equals(ParticipantUpdated, a, b);
  }
}

/**
 * @generated from message core.ParticipantDisconnected
 */
export class ParticipantDisconnected extends Message<ParticipantDisconnected> {
  /**
   * @generated from field: string participant_id = 1;
   */
  participantId = "";

  constructor(data?: PartialMessage<ParticipantDisconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.ParticipantDisconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantDisconnected {
    return new ParticipantDisconnected().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantDisconnected | PlainMessage<ParticipantDisconnected> | undefined, b: ParticipantDisconnected | PlainMessage<ParticipantDisconnected> | undefined): boolean {
    return proto3.util.equals(ParticipantDisconnected, a, b);
  }
}

