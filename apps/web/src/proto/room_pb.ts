// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file room.proto (package core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message core.Room
 */
export class Room extends Message<Room> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 started_at = 2;
   */
  startedAt = protoInt64.zero;

  /**
   * @generated from field: int64 updated_at = 3;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: uint32 num_participants = 4;
   */
  numParticipants = 0;

  /**
   * max duration in seconds
   *
   * @generated from field: uint32 max_duration = 5;
   */
  maxDuration = 0;

  constructor(data?: PartialMessage<Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "started_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "num_participants", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "max_duration", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {
    return new Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJsonString(jsonString, options);
  }

  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {
    return proto3.util.equals(Room, a, b);
  }
}

/**
 * @generated from message core.Participant
 */
export class Participant extends Message<Participant> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: core.ParticipantPermissions permissions = 3;
   */
  permissions?: ParticipantPermissions;

  constructor(data?: PartialMessage<Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.Participant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "permissions", kind: "message", T: ParticipantPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Participant {
    return new Participant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Participant {
    return new Participant().fromJsonString(jsonString, options);
  }

  static equals(a: Participant | PlainMessage<Participant> | undefined, b: Participant | PlainMessage<Participant> | undefined): boolean {
    return proto3.util.equals(Participant, a, b);
  }
}

/**
 * @generated from message core.ParticipantPermissions
 */
export class ParticipantPermissions extends Message<ParticipantPermissions> {
  /**
   * @generated from field: bool room_admin = 1;
   */
  roomAdmin = false;

  constructor(data?: PartialMessage<ParticipantPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "core.ParticipantPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantPermissions {
    return new ParticipantPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantPermissions {
    return new ParticipantPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantPermissions {
    return new ParticipantPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantPermissions | PlainMessage<ParticipantPermissions> | undefined, b: ParticipantPermissions | PlainMessage<ParticipantPermissions> | undefined): boolean {
    return proto3.util.equals(ParticipantPermissions, a, b);
  }
}

