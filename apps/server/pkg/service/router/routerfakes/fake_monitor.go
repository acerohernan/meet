// Code generated by counterfeiter. DO NOT EDIT.
package routerfakes

import (
	"sync"

	"github.com/acerohernan/meet/pkg/service/router"
)

type FakeMonitor struct {
	GetCpuUsageStub        func() (float32, error)
	getCpuUsageMutex       sync.RWMutex
	getCpuUsageArgsForCall []struct {
	}
	getCpuUsageReturns struct {
		result1 float32
		result2 error
	}
	getCpuUsageReturnsOnCall map[int]struct {
		result1 float32
		result2 error
	}
	GetMemUsageStub        func() (float32, error)
	getMemUsageMutex       sync.RWMutex
	getMemUsageArgsForCall []struct {
	}
	getMemUsageReturns struct {
		result1 float32
		result2 error
	}
	getMemUsageReturnsOnCall map[int]struct {
		result1 float32
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMonitor) GetCpuUsage() (float32, error) {
	fake.getCpuUsageMutex.Lock()
	ret, specificReturn := fake.getCpuUsageReturnsOnCall[len(fake.getCpuUsageArgsForCall)]
	fake.getCpuUsageArgsForCall = append(fake.getCpuUsageArgsForCall, struct {
	}{})
	stub := fake.GetCpuUsageStub
	fakeReturns := fake.getCpuUsageReturns
	fake.recordInvocation("GetCpuUsage", []interface{}{})
	fake.getCpuUsageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitor) GetCpuUsageCallCount() int {
	fake.getCpuUsageMutex.RLock()
	defer fake.getCpuUsageMutex.RUnlock()
	return len(fake.getCpuUsageArgsForCall)
}

func (fake *FakeMonitor) GetCpuUsageCalls(stub func() (float32, error)) {
	fake.getCpuUsageMutex.Lock()
	defer fake.getCpuUsageMutex.Unlock()
	fake.GetCpuUsageStub = stub
}

func (fake *FakeMonitor) GetCpuUsageReturns(result1 float32, result2 error) {
	fake.getCpuUsageMutex.Lock()
	defer fake.getCpuUsageMutex.Unlock()
	fake.GetCpuUsageStub = nil
	fake.getCpuUsageReturns = struct {
		result1 float32
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitor) GetCpuUsageReturnsOnCall(i int, result1 float32, result2 error) {
	fake.getCpuUsageMutex.Lock()
	defer fake.getCpuUsageMutex.Unlock()
	fake.GetCpuUsageStub = nil
	if fake.getCpuUsageReturnsOnCall == nil {
		fake.getCpuUsageReturnsOnCall = make(map[int]struct {
			result1 float32
			result2 error
		})
	}
	fake.getCpuUsageReturnsOnCall[i] = struct {
		result1 float32
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitor) GetMemUsage() (float32, error) {
	fake.getMemUsageMutex.Lock()
	ret, specificReturn := fake.getMemUsageReturnsOnCall[len(fake.getMemUsageArgsForCall)]
	fake.getMemUsageArgsForCall = append(fake.getMemUsageArgsForCall, struct {
	}{})
	stub := fake.GetMemUsageStub
	fakeReturns := fake.getMemUsageReturns
	fake.recordInvocation("GetMemUsage", []interface{}{})
	fake.getMemUsageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMonitor) GetMemUsageCallCount() int {
	fake.getMemUsageMutex.RLock()
	defer fake.getMemUsageMutex.RUnlock()
	return len(fake.getMemUsageArgsForCall)
}

func (fake *FakeMonitor) GetMemUsageCalls(stub func() (float32, error)) {
	fake.getMemUsageMutex.Lock()
	defer fake.getMemUsageMutex.Unlock()
	fake.GetMemUsageStub = stub
}

func (fake *FakeMonitor) GetMemUsageReturns(result1 float32, result2 error) {
	fake.getMemUsageMutex.Lock()
	defer fake.getMemUsageMutex.Unlock()
	fake.GetMemUsageStub = nil
	fake.getMemUsageReturns = struct {
		result1 float32
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitor) GetMemUsageReturnsOnCall(i int, result1 float32, result2 error) {
	fake.getMemUsageMutex.Lock()
	defer fake.getMemUsageMutex.Unlock()
	fake.GetMemUsageStub = nil
	if fake.getMemUsageReturnsOnCall == nil {
		fake.getMemUsageReturnsOnCall = make(map[int]struct {
			result1 float32
			result2 error
		})
	}
	fake.getMemUsageReturnsOnCall[i] = struct {
		result1 float32
		result2 error
	}{result1, result2}
}

func (fake *FakeMonitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCpuUsageMutex.RLock()
	defer fake.getCpuUsageMutex.RUnlock()
	fake.getMemUsageMutex.RLock()
	defer fake.getMemUsageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMonitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ router.Monitor = new(FakeMonitor)
