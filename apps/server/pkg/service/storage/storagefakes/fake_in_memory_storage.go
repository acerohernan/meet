// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/acerohernan/meet/core"
	"github.com/acerohernan/meet/pkg/service/storage"
)

type FakeInMemoryStorage struct {
	DeleteNodeStub        func(context.Context, string, string) error
	deleteNodeMutex       sync.RWMutex
	deleteNodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteNodeReturns struct {
		result1 error
	}
	deleteNodeReturnsOnCall map[int]struct {
		result1 error
	}
	ListNodesStub        func(context.Context, string) ([]*core.Node, error)
	listNodesMutex       sync.RWMutex
	listNodesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	listNodesReturns struct {
		result1 []*core.Node
		result2 error
	}
	listNodesReturnsOnCall map[int]struct {
		result1 []*core.Node
		result2 error
	}
	StoreNodeStub        func(context.Context, string, *core.Node) error
	storeNodeMutex       sync.RWMutex
	storeNodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *core.Node
	}
	storeNodeReturns struct {
		result1 error
	}
	storeNodeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInMemoryStorage) DeleteNode(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteNodeMutex.Lock()
	ret, specificReturn := fake.deleteNodeReturnsOnCall[len(fake.deleteNodeArgsForCall)]
	fake.deleteNodeArgsForCall = append(fake.deleteNodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteNodeStub
	fakeReturns := fake.deleteNodeReturns
	fake.recordInvocation("DeleteNode", []interface{}{arg1, arg2, arg3})
	fake.deleteNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInMemoryStorage) DeleteNodeCallCount() int {
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	return len(fake.deleteNodeArgsForCall)
}

func (fake *FakeInMemoryStorage) DeleteNodeCalls(stub func(context.Context, string, string) error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = stub
}

func (fake *FakeInMemoryStorage) DeleteNodeArgsForCall(i int) (context.Context, string, string) {
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	argsForCall := fake.deleteNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInMemoryStorage) DeleteNodeReturns(result1 error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = nil
	fake.deleteNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInMemoryStorage) DeleteNodeReturnsOnCall(i int, result1 error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = nil
	if fake.deleteNodeReturnsOnCall == nil {
		fake.deleteNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInMemoryStorage) ListNodes(arg1 context.Context, arg2 string) ([]*core.Node, error) {
	fake.listNodesMutex.Lock()
	ret, specificReturn := fake.listNodesReturnsOnCall[len(fake.listNodesArgsForCall)]
	fake.listNodesArgsForCall = append(fake.listNodesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ListNodesStub
	fakeReturns := fake.listNodesReturns
	fake.recordInvocation("ListNodes", []interface{}{arg1, arg2})
	fake.listNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInMemoryStorage) ListNodesCallCount() int {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	return len(fake.listNodesArgsForCall)
}

func (fake *FakeInMemoryStorage) ListNodesCalls(stub func(context.Context, string) ([]*core.Node, error)) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = stub
}

func (fake *FakeInMemoryStorage) ListNodesArgsForCall(i int) (context.Context, string) {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	argsForCall := fake.listNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeInMemoryStorage) ListNodesReturns(result1 []*core.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	fake.listNodesReturns = struct {
		result1 []*core.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeInMemoryStorage) ListNodesReturnsOnCall(i int, result1 []*core.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	if fake.listNodesReturnsOnCall == nil {
		fake.listNodesReturnsOnCall = make(map[int]struct {
			result1 []*core.Node
			result2 error
		})
	}
	fake.listNodesReturnsOnCall[i] = struct {
		result1 []*core.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeInMemoryStorage) StoreNode(arg1 context.Context, arg2 string, arg3 *core.Node) error {
	fake.storeNodeMutex.Lock()
	ret, specificReturn := fake.storeNodeReturnsOnCall[len(fake.storeNodeArgsForCall)]
	fake.storeNodeArgsForCall = append(fake.storeNodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *core.Node
	}{arg1, arg2, arg3})
	stub := fake.StoreNodeStub
	fakeReturns := fake.storeNodeReturns
	fake.recordInvocation("StoreNode", []interface{}{arg1, arg2, arg3})
	fake.storeNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeInMemoryStorage) StoreNodeCallCount() int {
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	return len(fake.storeNodeArgsForCall)
}

func (fake *FakeInMemoryStorage) StoreNodeCalls(stub func(context.Context, string, *core.Node) error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = stub
}

func (fake *FakeInMemoryStorage) StoreNodeArgsForCall(i int) (context.Context, string, *core.Node) {
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	argsForCall := fake.storeNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeInMemoryStorage) StoreNodeReturns(result1 error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = nil
	fake.storeNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInMemoryStorage) StoreNodeReturnsOnCall(i int, result1 error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = nil
	if fake.storeNodeReturnsOnCall == nil {
		fake.storeNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeInMemoryStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInMemoryStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.InMemoryStorage = new(FakeInMemoryStorage)
