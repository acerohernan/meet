// Code generated by counterfeiter. DO NOT EDIT.
package storagefakes

import (
	"context"
	"sync"

	"github.com/acerohernan/meet/core"
	"github.com/acerohernan/meet/pkg/service/storage"
)

type FakeObjectStore struct {
	DeleteNodeStub        func(context.Context, string, string) error
	deleteNodeMutex       sync.RWMutex
	deleteNodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteNodeReturns struct {
		result1 error
	}
	deleteNodeReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRoomStub        func(context.Context, string) error
	deleteRoomMutex       sync.RWMutex
	deleteRoomArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteRoomReturns struct {
		result1 error
	}
	deleteRoomReturnsOnCall map[int]struct {
		result1 error
	}
	ListNodesStub        func(context.Context, string) ([]*core.Node, error)
	listNodesMutex       sync.RWMutex
	listNodesArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	listNodesReturns struct {
		result1 []*core.Node
		result2 error
	}
	listNodesReturnsOnCall map[int]struct {
		result1 []*core.Node
		result2 error
	}
	ListRoomsStub        func(context.Context) ([]*core.Room, error)
	listRoomsMutex       sync.RWMutex
	listRoomsArgsForCall []struct {
		arg1 context.Context
	}
	listRoomsReturns struct {
		result1 []*core.Room
		result2 error
	}
	listRoomsReturnsOnCall map[int]struct {
		result1 []*core.Room
		result2 error
	}
	LoadRoomStub        func(context.Context, string) (*core.Room, error)
	loadRoomMutex       sync.RWMutex
	loadRoomArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	loadRoomReturns struct {
		result1 *core.Room
		result2 error
	}
	loadRoomReturnsOnCall map[int]struct {
		result1 *core.Room
		result2 error
	}
	StoreNodeStub        func(context.Context, string, *core.Node) error
	storeNodeMutex       sync.RWMutex
	storeNodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *core.Node
	}
	storeNodeReturns struct {
		result1 error
	}
	storeNodeReturnsOnCall map[int]struct {
		result1 error
	}
	StoreRoomStub        func(context.Context, *core.Room) error
	storeRoomMutex       sync.RWMutex
	storeRoomArgsForCall []struct {
		arg1 context.Context
		arg2 *core.Room
	}
	storeRoomReturns struct {
		result1 error
	}
	storeRoomReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObjectStore) DeleteNode(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteNodeMutex.Lock()
	ret, specificReturn := fake.deleteNodeReturnsOnCall[len(fake.deleteNodeArgsForCall)]
	fake.deleteNodeArgsForCall = append(fake.deleteNodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteNodeStub
	fakeReturns := fake.deleteNodeReturns
	fake.recordInvocation("DeleteNode", []interface{}{arg1, arg2, arg3})
	fake.deleteNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStore) DeleteNodeCallCount() int {
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	return len(fake.deleteNodeArgsForCall)
}

func (fake *FakeObjectStore) DeleteNodeCalls(stub func(context.Context, string, string) error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = stub
}

func (fake *FakeObjectStore) DeleteNodeArgsForCall(i int) (context.Context, string, string) {
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	argsForCall := fake.deleteNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeObjectStore) DeleteNodeReturns(result1 error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = nil
	fake.deleteNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) DeleteNodeReturnsOnCall(i int, result1 error) {
	fake.deleteNodeMutex.Lock()
	defer fake.deleteNodeMutex.Unlock()
	fake.DeleteNodeStub = nil
	if fake.deleteNodeReturnsOnCall == nil {
		fake.deleteNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) DeleteRoom(arg1 context.Context, arg2 string) error {
	fake.deleteRoomMutex.Lock()
	ret, specificReturn := fake.deleteRoomReturnsOnCall[len(fake.deleteRoomArgsForCall)]
	fake.deleteRoomArgsForCall = append(fake.deleteRoomArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteRoomStub
	fakeReturns := fake.deleteRoomReturns
	fake.recordInvocation("DeleteRoom", []interface{}{arg1, arg2})
	fake.deleteRoomMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStore) DeleteRoomCallCount() int {
	fake.deleteRoomMutex.RLock()
	defer fake.deleteRoomMutex.RUnlock()
	return len(fake.deleteRoomArgsForCall)
}

func (fake *FakeObjectStore) DeleteRoomCalls(stub func(context.Context, string) error) {
	fake.deleteRoomMutex.Lock()
	defer fake.deleteRoomMutex.Unlock()
	fake.DeleteRoomStub = stub
}

func (fake *FakeObjectStore) DeleteRoomArgsForCall(i int) (context.Context, string) {
	fake.deleteRoomMutex.RLock()
	defer fake.deleteRoomMutex.RUnlock()
	argsForCall := fake.deleteRoomArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStore) DeleteRoomReturns(result1 error) {
	fake.deleteRoomMutex.Lock()
	defer fake.deleteRoomMutex.Unlock()
	fake.DeleteRoomStub = nil
	fake.deleteRoomReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) DeleteRoomReturnsOnCall(i int, result1 error) {
	fake.deleteRoomMutex.Lock()
	defer fake.deleteRoomMutex.Unlock()
	fake.DeleteRoomStub = nil
	if fake.deleteRoomReturnsOnCall == nil {
		fake.deleteRoomReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRoomReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) ListNodes(arg1 context.Context, arg2 string) ([]*core.Node, error) {
	fake.listNodesMutex.Lock()
	ret, specificReturn := fake.listNodesReturnsOnCall[len(fake.listNodesArgsForCall)]
	fake.listNodesArgsForCall = append(fake.listNodesArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ListNodesStub
	fakeReturns := fake.listNodesReturns
	fake.recordInvocation("ListNodes", []interface{}{arg1, arg2})
	fake.listNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStore) ListNodesCallCount() int {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	return len(fake.listNodesArgsForCall)
}

func (fake *FakeObjectStore) ListNodesCalls(stub func(context.Context, string) ([]*core.Node, error)) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = stub
}

func (fake *FakeObjectStore) ListNodesArgsForCall(i int) (context.Context, string) {
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	argsForCall := fake.listNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStore) ListNodesReturns(result1 []*core.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	fake.listNodesReturns = struct {
		result1 []*core.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) ListNodesReturnsOnCall(i int, result1 []*core.Node, result2 error) {
	fake.listNodesMutex.Lock()
	defer fake.listNodesMutex.Unlock()
	fake.ListNodesStub = nil
	if fake.listNodesReturnsOnCall == nil {
		fake.listNodesReturnsOnCall = make(map[int]struct {
			result1 []*core.Node
			result2 error
		})
	}
	fake.listNodesReturnsOnCall[i] = struct {
		result1 []*core.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) ListRooms(arg1 context.Context) ([]*core.Room, error) {
	fake.listRoomsMutex.Lock()
	ret, specificReturn := fake.listRoomsReturnsOnCall[len(fake.listRoomsArgsForCall)]
	fake.listRoomsArgsForCall = append(fake.listRoomsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListRoomsStub
	fakeReturns := fake.listRoomsReturns
	fake.recordInvocation("ListRooms", []interface{}{arg1})
	fake.listRoomsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStore) ListRoomsCallCount() int {
	fake.listRoomsMutex.RLock()
	defer fake.listRoomsMutex.RUnlock()
	return len(fake.listRoomsArgsForCall)
}

func (fake *FakeObjectStore) ListRoomsCalls(stub func(context.Context) ([]*core.Room, error)) {
	fake.listRoomsMutex.Lock()
	defer fake.listRoomsMutex.Unlock()
	fake.ListRoomsStub = stub
}

func (fake *FakeObjectStore) ListRoomsArgsForCall(i int) context.Context {
	fake.listRoomsMutex.RLock()
	defer fake.listRoomsMutex.RUnlock()
	argsForCall := fake.listRoomsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeObjectStore) ListRoomsReturns(result1 []*core.Room, result2 error) {
	fake.listRoomsMutex.Lock()
	defer fake.listRoomsMutex.Unlock()
	fake.ListRoomsStub = nil
	fake.listRoomsReturns = struct {
		result1 []*core.Room
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) ListRoomsReturnsOnCall(i int, result1 []*core.Room, result2 error) {
	fake.listRoomsMutex.Lock()
	defer fake.listRoomsMutex.Unlock()
	fake.ListRoomsStub = nil
	if fake.listRoomsReturnsOnCall == nil {
		fake.listRoomsReturnsOnCall = make(map[int]struct {
			result1 []*core.Room
			result2 error
		})
	}
	fake.listRoomsReturnsOnCall[i] = struct {
		result1 []*core.Room
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) LoadRoom(arg1 context.Context, arg2 string) (*core.Room, error) {
	fake.loadRoomMutex.Lock()
	ret, specificReturn := fake.loadRoomReturnsOnCall[len(fake.loadRoomArgsForCall)]
	fake.loadRoomArgsForCall = append(fake.loadRoomArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.LoadRoomStub
	fakeReturns := fake.loadRoomReturns
	fake.recordInvocation("LoadRoom", []interface{}{arg1, arg2})
	fake.loadRoomMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObjectStore) LoadRoomCallCount() int {
	fake.loadRoomMutex.RLock()
	defer fake.loadRoomMutex.RUnlock()
	return len(fake.loadRoomArgsForCall)
}

func (fake *FakeObjectStore) LoadRoomCalls(stub func(context.Context, string) (*core.Room, error)) {
	fake.loadRoomMutex.Lock()
	defer fake.loadRoomMutex.Unlock()
	fake.LoadRoomStub = stub
}

func (fake *FakeObjectStore) LoadRoomArgsForCall(i int) (context.Context, string) {
	fake.loadRoomMutex.RLock()
	defer fake.loadRoomMutex.RUnlock()
	argsForCall := fake.loadRoomArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStore) LoadRoomReturns(result1 *core.Room, result2 error) {
	fake.loadRoomMutex.Lock()
	defer fake.loadRoomMutex.Unlock()
	fake.LoadRoomStub = nil
	fake.loadRoomReturns = struct {
		result1 *core.Room
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) LoadRoomReturnsOnCall(i int, result1 *core.Room, result2 error) {
	fake.loadRoomMutex.Lock()
	defer fake.loadRoomMutex.Unlock()
	fake.LoadRoomStub = nil
	if fake.loadRoomReturnsOnCall == nil {
		fake.loadRoomReturnsOnCall = make(map[int]struct {
			result1 *core.Room
			result2 error
		})
	}
	fake.loadRoomReturnsOnCall[i] = struct {
		result1 *core.Room
		result2 error
	}{result1, result2}
}

func (fake *FakeObjectStore) StoreNode(arg1 context.Context, arg2 string, arg3 *core.Node) error {
	fake.storeNodeMutex.Lock()
	ret, specificReturn := fake.storeNodeReturnsOnCall[len(fake.storeNodeArgsForCall)]
	fake.storeNodeArgsForCall = append(fake.storeNodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *core.Node
	}{arg1, arg2, arg3})
	stub := fake.StoreNodeStub
	fakeReturns := fake.storeNodeReturns
	fake.recordInvocation("StoreNode", []interface{}{arg1, arg2, arg3})
	fake.storeNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStore) StoreNodeCallCount() int {
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	return len(fake.storeNodeArgsForCall)
}

func (fake *FakeObjectStore) StoreNodeCalls(stub func(context.Context, string, *core.Node) error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = stub
}

func (fake *FakeObjectStore) StoreNodeArgsForCall(i int) (context.Context, string, *core.Node) {
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	argsForCall := fake.storeNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeObjectStore) StoreNodeReturns(result1 error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = nil
	fake.storeNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) StoreNodeReturnsOnCall(i int, result1 error) {
	fake.storeNodeMutex.Lock()
	defer fake.storeNodeMutex.Unlock()
	fake.StoreNodeStub = nil
	if fake.storeNodeReturnsOnCall == nil {
		fake.storeNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) StoreRoom(arg1 context.Context, arg2 *core.Room) error {
	fake.storeRoomMutex.Lock()
	ret, specificReturn := fake.storeRoomReturnsOnCall[len(fake.storeRoomArgsForCall)]
	fake.storeRoomArgsForCall = append(fake.storeRoomArgsForCall, struct {
		arg1 context.Context
		arg2 *core.Room
	}{arg1, arg2})
	stub := fake.StoreRoomStub
	fakeReturns := fake.storeRoomReturns
	fake.recordInvocation("StoreRoom", []interface{}{arg1, arg2})
	fake.storeRoomMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectStore) StoreRoomCallCount() int {
	fake.storeRoomMutex.RLock()
	defer fake.storeRoomMutex.RUnlock()
	return len(fake.storeRoomArgsForCall)
}

func (fake *FakeObjectStore) StoreRoomCalls(stub func(context.Context, *core.Room) error) {
	fake.storeRoomMutex.Lock()
	defer fake.storeRoomMutex.Unlock()
	fake.StoreRoomStub = stub
}

func (fake *FakeObjectStore) StoreRoomArgsForCall(i int) (context.Context, *core.Room) {
	fake.storeRoomMutex.RLock()
	defer fake.storeRoomMutex.RUnlock()
	argsForCall := fake.storeRoomArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeObjectStore) StoreRoomReturns(result1 error) {
	fake.storeRoomMutex.Lock()
	defer fake.storeRoomMutex.Unlock()
	fake.StoreRoomStub = nil
	fake.storeRoomReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) StoreRoomReturnsOnCall(i int, result1 error) {
	fake.storeRoomMutex.Lock()
	defer fake.storeRoomMutex.Unlock()
	fake.StoreRoomStub = nil
	if fake.storeRoomReturnsOnCall == nil {
		fake.storeRoomReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeRoomReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeObjectStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteNodeMutex.RLock()
	defer fake.deleteNodeMutex.RUnlock()
	fake.deleteRoomMutex.RLock()
	defer fake.deleteRoomMutex.RUnlock()
	fake.listNodesMutex.RLock()
	defer fake.listNodesMutex.RUnlock()
	fake.listRoomsMutex.RLock()
	defer fake.listRoomsMutex.RUnlock()
	fake.loadRoomMutex.RLock()
	defer fake.loadRoomMutex.RUnlock()
	fake.storeNodeMutex.RLock()
	defer fake.storeNodeMutex.RUnlock()
	fake.storeRoomMutex.RLock()
	defer fake.storeRoomMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObjectStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.ObjectStore = new(FakeObjectStore)
